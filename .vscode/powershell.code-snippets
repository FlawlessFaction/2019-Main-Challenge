
{
	// Will create a function based off the file name (ex: Test-Function.ps1)
	"sFunction" : {
		"prefix": "sFunction",
		"description": "basic function with default path parameter",
		"body": [
			"function ${TM_FILENAME_BASE:Test-Function}",
			"{",
			"    \u003c#",
			"        .Synopsis",
			"        ${1}",
			"        .Description",
			"        ${2}",
			"        .Example",
			"        ${TM_FILENAME_BASE} -${3:Path} \\$${3:Path}",
			"",
			"        .Notes",
			"        ",
			"    #\u003e",
			"    [cmdletbinding()]",
			"    param(",
			"        # Parameter help description",
			"        [Parameter(",
			"            Mandatory,",
			"            Position = 0,",
			"            ValueFromPipelineByPropertyName",
			"        )]",
			"        [ValidateNotNullOrEmpty()]",
			"        [String[]]",
			"        \\$${3:Path}",
			"    )",
			"",
			"    begin",
			"    {",
			"",
			"    }",
			"",
			"    process",
			"    {",
			"        try",
			"        {",
			"            foreach ( \\$${4:node} in \\$${3:Path} )",
			"            {",
			"                Write-Verbose \\$${4:node}",
			"                ${5}",
			"            }",
			"        }",
			"        catch",
			"        {",
			"            \\$PSCmdlet.ThrowTerminatingError( \\$PSItem )",
			"        }",
			"    }",
			"",
			"    end",
			"    {",
			"",
			"    }",
			"}",
			""
	]
	},
	"sdescribe" :
	{
		"prefix": "sDescribe",
		"description": "Default describe block for a function",
		"body": [
			"Describe \u0027Function ${TM_FILENAME_BASE/(\\.Tests)//gi}\u0027 {",
			"    It \u0027Should not throw\u0027 {",
			"        ${TM_FILENAME_BASE/(\\.Tests)//gi} -WhatIf",
			"    }",
			"",
			"    It \u0027Does something\u0027 {",
			"        ${0}",
			"    }",
			"}",
			""
	]
	}
}
